// Code generated by "stringer -type=tac_op_type"; DO NOT EDIT.

package vm

import "strconv"

const _tac_op_type_name = "TAC_ADDTAC_SUBTAC_MULTIPLYTAC_DIVIDETAC_MODULUSTAC_LEFT_SHIFTTAC_RIGHT_SHIFTTAC_UNSIGNED_RIGHT_SHIFTTAC_BITWISE_ANDTAC_BITWISE_XORTAC_BITWISE_ORTAC_UPLUSTAC_UMINUSTAC_UNOTTAC_TYPEOFTAC_BITWISE_NOTTAC_DECLARETAC_ASSIGNTAC_PUSH_ARRAY_MEMBERTAC_NEW_ARRAYTAC_PUSH_OBJECT_MEMBERTAC_NEW_OBJECTTAC_END_OBJECTTAC_PUSH_PARAMTAC_CALLTAC_NEWTAC_LOADTAC_LESS_THANTAC_GREATER_THANTAC_GREATER_THAN_EQTAC_EQUALSTAC_NOT_EQUALSTAC_STRICT_EQUALSTAC_STRICT_NOT_EQUALSTAC_LESS_THAN_EQTAC_LOGICAL_ANDTAC_LOGICAL_ORTAC_LOGICAL_NOTTAC_INTAC_FUNCTION_PARAMETERTAC_FUNCTIONTAC_END_FUNCTIONTAC_RETURNTAC_JNETAC_LABELTAC_JMP"

var _tac_op_type_index = [...]uint16{0, 7, 14, 26, 36, 47, 61, 76, 100, 115, 130, 144, 153, 163, 171, 181, 196, 207, 217, 238, 251, 273, 287, 301, 315, 323, 330, 338, 351, 367, 386, 396, 410, 427, 448, 464, 479, 493, 508, 514, 536, 548, 564, 574, 581, 590, 597}

func (i tac_op_type) String() string {
	if i < 0 || i >= tac_op_type(len(_tac_op_type_index)-1) {
		return "tac_op_type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _tac_op_type_name[_tac_op_type_index[i]:_tac_op_type_index[i+1]]
}
